#!/bin/bash
set -e

msg_cmd="i3-msg"
[ "$(basename "$0")"  == "sway-macro" ] && msg_cmd="swaymsg"

function print_usage(){
	cat <<- EOF
	Usage: $(basename $0) CMD [CMD_ARGS]

	with
	    CMD:        The command to use (see valid commands below)
	    CMD_ARGS:   The arguments to be passed to the command

	valid commands:

	    help                        Print this help

	    move_split                  Intuitively move the split. Required args:
	                                   type: (up|down|left|right)
	                                   increment: (integer value)

	    toggle_pseudo_maximize      Use a new workspace to emulate
	                                maximizing the currently focused container

	EOF
}

function die(){
	echo
	echo "Error: $@" >&2
	echo
	print_usage
	exit -1
}

function debug(){
	[ -n "$DEBUG" ] && echo "$@" >&2
}

function print_current_ws_prop(){
    local _field_name=$1
    ${msg_cmd} -t get_workspaces | jq ' .[] | select(.focused==true) | .'${_field_name}
}

function print_current_ws_num(){
    print_current_ws_prop "num"
}

function print_current_ws_name(){
    print_current_ws_prop "name" | tr -d \"
}

function print_container_by_id(){
	local _id=$1
	${msg_cmd} -t get_tree | jq ' recurse(.nodes[]) | select(.id=='$_id')'
}

function_print_parent_container_by_id(){
	local _id=$1
	${msg_cmd} -t get_tree | jq ' recurse(.nodes[]) | select(.nodes[].id=='$_id')'
}

function print_focused_container(){
	${msg_cmd} -t get_tree | jq ' recurse(.nodes[]) | select(.focused==true)'
}

function is_last_container(){
	local _coordinate_name=$1
	local _dim_name=$2
	local _container_id
	local _current_container
	debug "is_last_container $@"
	if [ $# -gt 2 ];then
		local _container_id=$3
		_current_container=$(print_container_by_id $_container_id)
	else
		_current_container=$(print_focused_container)
		_container_id=$(echo "$_current_container" | jq '.id')
	fi
	debug "Container id: "$_container_id
	local _parent_container=$(function_print_parent_container_by_id $_container_id)	
	local _container_co=$(echo "$_current_container" | jq .rect.${_coordinate_name})
	local _container_dim=$(echo "$_current_container" | jq .rect.${_dim_name})
	local _container_edge_coordinate=$((_container_co+_container_dim))
	local _container_deco_dim
	if [ "$_dim_name" == "height" ];then
		_container_deco_dim=$(echo "$_current_container" | jq .deco_rect.${_dim_name})
	else
		_container_deco_dim=0
	fi
	local _container_dim_w_deco=$((_container_dim+_container_deco_dim))
	local _parent_co=$(echo "$_parent_container" | jq .rect.${_coordinate_name})
	local _parent_dim=$(echo "$_parent_container" | jq .rect.${_dim_name})
	local _parent_edge_coordinate=$((_parent_co+_parent_dim))
	local _ws_dim=$(print_current_ws_prop rect.$_dim_name)
	debug "_container_co: "$_container_co
	debug "_container_dim: "$_container_dim
	debug "_container_deco_dim: "$_container_deco_dim
	debug "_container_dim_w_deco: "$_container_dim_w_deco
	debug "_container_edge_coordinate: "$_container_edge_coordinate
	debug "_parent_co: "$_parent_co
	debug "_parent_dim: "$_parent_dim
	debug "_parent_edge_coordinate: "$_parent_edge_coordinate
	debug "_ws_dim: "$_ws_dim

	if [ $_container_dim_w_deco -ge $_parent_dim ] && [ $_container_dim_w_deco -lt $_ws_dim ];then
		debug "recurse to parent"
		local _parent_container_id=$(echo "$_parent_container" | jq .id)
		is_last_container $_coordinate_name $_dim_name $_parent_container_id
	elif [ $_container_edge_coordinate -ge $_parent_edge_coordinate ];then
		debug "return true"
		echo "true"
	else
		debug "return false"
		echo "false"
	fi
}

function is_bottom_container(){
	is_last_container "y" "height"
}

function is_right_most_container(){
	is_last_container "x" "width"
}

function move_split(){
	local _type=$1
	local _increment=$2
	local _dimension
	local _action
	case $_type in
		'up')
			_dimension="height"
			if [ "$(is_bottom_container)" == "true" ];then
				_action="grow"
			else
				_action="shrink"
			fi
			;;
		'down')
			_dimension="height"
			if [ "$(is_bottom_container)" == "true" ];then
				_action="shrink"
			else
				_action="grow"
			fi
			;;
		'left')
			_dimension="width"
			if [ "$(is_right_most_container)" == "true" ];then
				_action="grow"
			else
				_action="shrink"
			fi
			;;
		'right')
			_dimension="width"
			if [ "$(is_right_most_container)" == "true" ];then
				_action="shrink"
			else
				_action="grow"
			fi
			;;
		*)
			die "Invalid move_split type $_type"
			;;
	esac
	${msg_cmd} resize $_action $_dimension $_increment px or $_increment ppt
}

function toggle_pseudo_maximize(){
	local _offset=${1-"10"}
	local _current_ws_num=$(print_current_ws_num)
	local _current_ws_name=$(print_current_ws_name)
	# TODO: check that the workspace name starts with _current_ws_num
	if [ ${_current_ws_num} -le ${_offset} ]; then
		_dst_ws_num=$((_current_ws_num+_offset))
	else
		_dst_ws_num=$((_current_ws_num-_offset))
	fi
	local _dst_ws_name=$(echo $_current_ws_name | sed -e "s/^${_current_ws_num}/${_dst_ws_num}/")
	${msg_cmd} move container to workspace ${_dst_ws_name}
	${msg_cmd} workspace ${_dst_ws_name}
}

CMD=$1
[ -z "$CMD" ] && die "Parameter CMD missing!"
shift

jq -h > /dev/null 2>&1 || die "This tool requires jq. Please install that first!"

case $CMD in
	'help')
		print_usage
		;;
	'move_split')
		move_split $@
		;;
	'toggle_pseudo_maximize')
		toggle_pseudo_maximize $@
		;;
	'x')
		# For debugging purposes
		is_right_most_container $@
		;;
	'y')
		# For debugging purposes
		is_bottom_container $@
		;;
	*)
		die "Unknown command: $CMD"
		;;
esac
